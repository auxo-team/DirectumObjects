using System;
using System.Collections.Generic;
using System.Linq;
using Sungero.Core;
using Sungero.CoreEntities;
using Sungero.Metadata;
using Sungero.Domain.Shared;
using ReportRes = Auxo.Common.Reports.Resources;

namespace Auxo.Common
{
  partial class ObjectChangesServerHandlers
  {

    public override void BeforeExecute(Sungero.Reporting.Server.BeforeExecuteEventArgs e)
    {
      var objType = ObjectChanges.Entity;
      var handlerNames = this.GetEventNames();      
      var reportSessionId = Guid.NewGuid().ToString();
      ObjectChanges.ReportSessionId = reportSessionId;
      
      var typeGuids = new List<string> { objType.EntityGuid };
      typeGuids.AddRange(objType.Parents.Select(_ => _.EntityGuid).ToList());
      
      foreach (var typeGuid in typeGuids)
      {
        var changedList = ObjectChangesDataReport(Guid.Parse(typeGuid), handlerNames);
        if (!changedList.Any())
          continue;
        
        foreach (var record in changedList)
          record.ReportSessionId = reportSessionId;
        
        Sungero.Docflow.PublicFunctions.Module.WriteStructuresToTable(Constants.ObjectChanges.SourceTableName, changedList);
      }
    }

    /// <summary>
    /// Получить данные для отчета "Изменения объекта".
    /// </summary>
    /// <param name="entityGuid">Guid метаданных объекта.</param>
    /// <param name="eventNames">Список событий и параметров.</param>
    /// <returns>Список измененных данных.</returns>
    [Public]
    public static List<Structures.ObjectChanges.IOverrideData> ObjectChangesDataReport(Guid entityGuid,
                                                                                 System.Collections.Generic.HashSet<System.Collections.Generic.KeyValuePair<string, string>> handlerNames)
    {
      var changedList = new List<Structures.ObjectChanges.IOverrideData>();
      
      var metadata = Sungero.Metadata.Services.MetadataSearcher.FindEntityMetadata(entityGuid);
      if (metadata == null)
        return changedList;
      
      //События
      changedList.AddRange(GetEditHandledEvents(metadata, handlerNames));
      
      //Свойства
      changedList.AddRange(GetEditProperties(metadata, handlerNames));
      
      //Действия
      changedList.AddRange(GetEditActions(metadata, handlerNames));
      
      //Форма
      changedList.AddRange(GetForms(metadata));
      
      //Лента
      changedList.AddRange(GetRibbons(metadata));
      
      if (!changedList.Any())
        return changedList;
      
      var moduleMetadata = metadata.ModuleMetadata;
      if (moduleMetadata != null)
      {
        foreach (var record in changedList)
          record.CompanyCode = moduleMetadata.CompanyCode;
      }
      
      return changedList;
    }
    
    /// <summary>
    /// Получить список измененных событий.
    /// </summary>
    /// <param name="metadata">Метаданные объекта.</param>
    /// <param name="handlerNames">Список событий и параметров.</param>
    /// <returns>Список измененных данных.</returns>
    private static List<Structures.ObjectChanges.IOverrideData> GetEditHandledEvents(Sungero.Metadata.EntityMetadata metadata,
                                                                               System.Collections.Generic.HashSet<System.Collections.Generic.KeyValuePair<string, string>> handlerNames)
    {
      var changedList = new List<Structures.ObjectChanges.IOverrideData>();
      
      var excludeEvents = new List<string> { "IsAutoGenerated" };
      
      foreach (var handler in metadata.HandledEvents.Where(_ => !excludeEvents.Contains(_)))
      {
        var handlerName = handlerNames.Where(_ => _.Key == handler).FirstOrDefault();
        var itemName = handlerName.Value == null ? ResourceService.Instance.GetString(metadata, handler, true, Array.Empty<object>()) : handlerName.Value;
        changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                               "HandledEvents",
                                                               itemName,
                                                               string.Empty,
                                                               ReportRes.ObjectChanges.RedefinedName,
                                                               string.Empty));
      }

      foreach (var handler in metadata.OverriddenFields)
      {
        var handlerName = handlerNames.Where(_ => _.Key == handler).FirstOrDefault();
        var itemName = handlerName.Value == null ? ResourceService.Instance.GetString(metadata, handler, true, Array.Empty<object>()) : handlerName.Value;
        changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                               "HandledEvents",
                                                               itemName,
                                                               string.Empty,
                                                               ReportRes.ObjectChanges.ModifiedName,
                                                               string.Empty));
      }
      
      return changedList;
    }

    /// <summary>
    /// Получить список измененных свойств.
    /// </summary>
    /// <param name="metadata">Метаданные объекта.</param>
    /// <param name="eventNames">Список событий и параметров.</param>
    /// <returns>Список измененных данных.</returns>
    private static List<Structures.ObjectChanges.IOverrideData> GetEditProperties(Sungero.Metadata.EntityMetadata metadata,
                                                                            System.Collections.Generic.HashSet<System.Collections.Generic.KeyValuePair<string, string>> eventNames)
    {
      var changedList = new List<Structures.ObjectChanges.IOverrideData>();
      
      if (metadata.Properties == null)
        return changedList;
      
      var baseMetadata = metadata.GetOriginal();
      if (metadata.NameGuid == baseMetadata.NameGuid)
        baseMetadata = metadata.BaseEntityMetadata;
      
      var iteration = 0;
      while (baseMetadata != null && baseMetadata.Properties == null && iteration < 5)
      {
        if (baseMetadata != null)
          baseMetadata = baseMetadata.BaseEntityMetadata;
        
        iteration++;
      }
      
      if (baseMetadata == null || baseMetadata.Properties == null)
        return changedList;

      //Найдем все новые свойства
      var properties = baseMetadata.Properties;
      List<string> basePropertiesNames = properties.Select(_ => _.Name).ToList();
      foreach (var propertyMetadata in metadata.Properties.Where(_ => !basePropertiesNames.Contains(_.Name)))
        changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                               "Properties",
                                                               string.Format("{0}\"{1}\" ({2})",
                                                                             propertyMetadata.PropertyType == Sungero.Metadata.PropertyType.Collection ? ReportRes.ObjectChanges.CollectionName : string.Empty,
                                                                             propertyMetadata.GetLocalizedName(),
                                                                             propertyMetadata.Name),
                                                               string.Empty,
                                                               ReportRes.ObjectChanges.AddedName,
                                                               string.Empty));
      
      //Найдем все измененные свойства
      foreach (var propertyMetadata in metadata.Properties.Where(_ => _.IsOverridden))
      {
        var propertyName = string.Format("\"{0}\" ({1})", propertyMetadata.GetLocalizedName(), propertyMetadata.Name);
        GetEditProperty(changedList, propertyName, propertyMetadata, eventNames);
      }

      //Перекрытые свойства коллекций
      foreach (Sungero.Metadata.CollectionPropertyMetadata collectionMetadata in metadata.Properties.Where(_ => _.PropertyType == Sungero.Metadata.PropertyType.Collection))
      {
        var baseCollectionMetadata = (Sungero.Metadata.CollectionPropertyMetadata)metadata.BaseEntityMetadata.Properties.FirstOrDefault(_ => _.Name == collectionMetadata.Name);
        if (baseCollectionMetadata != null)
        {
          var basCollectionNames = baseCollectionMetadata.InterfaceMetadata.Properties.Select(_ => _.Name).ToList();
          foreach (var propertyMetadata in collectionMetadata.InterfaceMetadata.Properties.Where(_ => !basCollectionNames.Contains(_.Name)))
          {
            var propertyName = ReportRes.ObjectChanges.PropertyCollectionFormat(propertyMetadata.GetLocalizedName(), propertyMetadata.Name, collectionMetadata.GetLocalizedName(), collectionMetadata.Name);            
            changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                   "Properties",
                                                                   propertyName,
                                                                   string.Empty,
                                                                   ReportRes.ObjectChanges.AddedName,
                                                                   string.Empty));
          }
        }

        foreach (var propertyMetadata in collectionMetadata.InterfaceMetadata.Properties.Where(_ => _.IsOverridden))
        {
          var propertyName = ReportRes.ObjectChanges.PropertyCollectionFormat(propertyMetadata.GetLocalizedName(), propertyMetadata.Name, collectionMetadata.GetLocalizedName(), collectionMetadata.Name);          
          GetEditProperty(changedList, propertyName, propertyMetadata, eventNames);
        }
      }
      
      return changedList;
    }
    
    /// <summary>
    /// Получить список измененных данных свойства.
    /// </summary>
    /// <param name="changedList">Список измененных событий.</param>
    /// <param name="propertyName">Имя свойства.</param>
    /// <param name="propertyMetadata">Метаданные свойства.</param>
    /// <param name="eventNames">Список событий и параметров.</param>
    private static void GetEditProperty(List<Structures.ObjectChanges.IOverrideData> changedList,
                                        string propertyName,
                                        Sungero.Metadata.PropertyMetadata propertyMetadata,
                                        System.Collections.Generic.HashSet<System.Collections.Generic.KeyValuePair<string, string>> eventNames)
    {
      foreach (var handler in propertyMetadata.HandledEvents)
      {
        var eventName = eventNames.Where(_ => _.Key == handler).FirstOrDefault();
        changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                               "Properties",
                                                               propertyName,
                                                               !Equals(eventName.Value, null) ? eventName.Value : handler,
                                                               ReportRes.ObjectChanges.RedefinedName,
                                                               string.Empty));
      }
      
      var excludeFields = new List<string> {
        "EntityGuid",
        "HandledEvents",
        "Values",
        "PreviousPropertyGuid",
        "IsVisibleInCollectionByDefault",
        "IsVisibleInFolderByDefault",
        "NeedPassEntityToLookupEvent",
        "IsAutoGenerated"
      };
      
      foreach (var field in propertyMetadata.OverriddenFields.Where(_ => !excludeFields.Contains(_)))
      {
        var fieldName = eventNames.Where(_ => _.Key == field).FirstOrDefault();
        changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                               "Properties",
                                                               propertyName,
                                                               !Equals(fieldName.Value, null) ? fieldName.Value : field,
                                                               ReportRes.ObjectChanges.ModifiedName,
                                                               string.Empty));
      }
      
      if (propertyMetadata.PropertyType == Sungero.Metadata.PropertyType.Enumeration)
      {
        var enumMetadata = (Sungero.Metadata.EnumPropertyMetadata)propertyMetadata;
        if (enumMetadata.DirectValues != null && enumMetadata.DirectValues.Any())
          changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                 "Properties",
                                                                 propertyName,
                                                                 string.Empty,
                                                                 ReportRes.ObjectChanges.AddedEnumsName,
                                                                 string.Empty));
      }
    }
    
    /// <summary>
    /// Получить список измененных действий.
    /// </summary>
    /// <param name="metadata">Метаданные объекта.</param>
    /// <param name="handlerNames">Список событий и параметров.</param>
    /// <returns>Список измененных данных.</returns>
    private static List<Structures.ObjectChanges.IOverrideData> GetEditActions(Sungero.Metadata.EntityMetadata metadata,
                                                                         System.Collections.Generic.HashSet<System.Collections.Generic.KeyValuePair<string, string>> handlerNames)
    {
      var changedList = new List<Structures.ObjectChanges.IOverrideData>();

      if (metadata.Actions == null)
        return changedList;
      
      var baseMetadata = metadata.GetOriginal();
      if (metadata.NameGuid == baseMetadata.NameGuid)
        baseMetadata = metadata.BaseEntityMetadata;
      
      var iteration = 0;
      while (baseMetadata != null && baseMetadata.Actions == null && iteration < 5)
      {
        if (baseMetadata != null)
          baseMetadata = baseMetadata.BaseEntityMetadata;
        
        iteration++;
      }
      
      if (baseMetadata == null || baseMetadata.Actions == null)
        return changedList;
      
      //Найдем все новые действия
      var actions = baseMetadata.Actions;
      List<string> baseActionsNames = actions.Select(_ => _.Name).ToList();
      foreach (var actionMetadata in metadata.Actions.Where(_ => !baseActionsNames.Contains(_.Name)))
      {
        var actionName = string.Format("{0} ({1})", actionMetadata.GetLocalizedName(), actionMetadata.Name);
        changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                               "Actions",
                                                               actionName,
                                                               string.Empty,
                                                               ReportRes.ObjectChanges.AddedName,
                                                               string.Empty));
      }
      
      //Найдем все измененные действия
      foreach (var actionMetadata in metadata.Actions.Where(_ => _.IsOverridden))
      {
        var actionName = string.Format("{0} ({1})", actionMetadata.GetLocalizedName(), actionMetadata.Name);
        foreach (var field in actionMetadata.OverriddenFields)
        {
          var fieldName = handlerNames.Where(_ => _.Key == field).FirstOrDefault();
          var itemName = fieldName.Value == null ? ResourceService.Instance.GetString(metadata, field, true, Array.Empty<object>()) : fieldName.Value;
          changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                 "Actions",
                                                                 actionName,
                                                                 itemName,
                                                                 ReportRes.ObjectChanges.ModifiedName,
                                                                 string.Empty));
        }
      }
      
      return changedList;
    }
    
    /// <summary>
    /// Получить список контролов формы.
    /// </summary>
    /// <param name="metadata">Метаданные объекта.</param>
    /// <returns>Список измененных данных.</returns>
    private static List<Structures.ObjectChanges.IOverrideData> GetForms(Sungero.Metadata.EntityMetadata metadata)
    {
      var changedList = new List<Structures.ObjectChanges.IOverrideData>();

      if (metadata.SerializableForms == null)
        return changedList;
      
      var baseMetadata = metadata.GetOriginal();
      if (metadata.NameGuid == baseMetadata.NameGuid)
        baseMetadata = metadata.BaseEntityMetadata;
      
      var iteration = 0;
      while (baseMetadata != null && baseMetadata.SerializableForms == null && iteration < 5)
      {
        if (baseMetadata != null)
          baseMetadata = baseMetadata.BaseEntityMetadata;
        
        iteration++;
      }
      
      if (baseMetadata == null || baseMetadata.SerializableForms == null)
        return changedList;

      var serializableForms = baseMetadata.SerializableForms;
      List<string> baseFormsNames = serializableForms.Select(_ => _.Name).ToList();
      foreach (var formMetadata in metadata.SerializableForms
               .Where(_ => _ is Sungero.Metadata.InplaceFormMetadata)
               .Where(_ => !baseFormsNames.Contains(_.Name) || _.IsOverridden))
      {
        var action = formMetadata.IsOverridden ? ReportRes.ObjectChanges.ModifiedName : ReportRes.ObjectChanges.AddedName;
        var resourceFormName = string.Format("Form_{0}", formMetadata.NameGuid.ToString().Replace("-", string.Empty));
        var formName = ResourceService.Instance.GetString(formMetadata.ParentEntityMetadata, resourceFormName, true, Array.Empty<object>());
        var pageName = ReportRes.ObjectChanges.PageNameFormat(formName, formMetadata.Name);
        foreach (var controlMetadata in formMetadata.Controls)
        {
          //Группа контролов
          if (controlMetadata is Sungero.Metadata.ControlGroupMetadata)
          {
            var groupCntrl = (Sungero.Metadata.ControlGroupMetadata)controlMetadata;
            changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                   "Forms",
                                                                   ReportRes.ObjectChanges.GroupNameFormat(groupCntrl.GetDisplayName(), groupCntrl.Name),
                                                                   pageName,
                                                                   action,
                                                                   string.Empty));
            continue;
          }
          
          if (controlMetadata is Sungero.Metadata.ControlMetadata)
          {
            var control = (Sungero.Metadata.ControlMetadata)controlMetadata;
            changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                   "Forms",
                                                                   ReportRes.ObjectChanges.ControlNameFormat(control.Property.GetLocalizedName(), control.Name),
                                                                   pageName,
                                                                   action,
                                                                   string.Empty));
            continue;
          }
          
          if (controlMetadata is Sungero.Metadata.HyperlinkControlMetadata)
          {
            var hyperlink = (Sungero.Metadata.HyperlinkControlMetadata)controlMetadata;
            var resourceName = string.Format("Control_{0}_DisplayValue", hyperlink.NameGuid.ToString().Replace("-", string.Empty));
            var hyperlinkName = ResourceService.Instance.GetString(hyperlink.ParentFormMetadata.ParentEntityMetadata, resourceName, true, Array.Empty<object>());
            changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                   "Forms",
                                                                   ReportRes.ObjectChanges.LinkNameFormat(hyperlinkName, hyperlink.FunctionName),
                                                                   pageName,
                                                                   action,
                                                                   string.Empty));
            continue;
          }
          
          if (controlMetadata is Sungero.Metadata.FunctionControlMetadata)
          {
            var function = (Sungero.Metadata.FunctionControlMetadata)controlMetadata;
            changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                   "Forms",
                                                                   ReportRes.ObjectChanges.StateViewNameFormat(function.Name, function.FunctionName),
                                                                   pageName,
                                                                   action,
                                                                   string.Empty));
            continue;
          }
          
          if (controlMetadata is Sungero.Metadata.PreviewControlMetadata)
          {
            var preview = (Sungero.Metadata.PreviewControlMetadata)controlMetadata;
            changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                   "Forms",
                                                                   ReportRes.ObjectChanges.PreviewNameFormat(preview.Name),
                                                                   pageName,
                                                                   action,
                                                                   string.Empty));
            continue;
          }

          if (controlMetadata is Sungero.Metadata.LabelControlMetadata)
          {
            var label = (Sungero.Metadata.LabelControlMetadata)controlMetadata;
            changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                   "Forms",
                                                                   ReportRes.ObjectChanges.LabelNameFormat(label.Property.GetLocalizedName(), label.Name),
                                                                   pageName,
                                                                   action,
                                                                   string.Empty));
          }
        }
      }
      
      
      return changedList;
    }
    
    /// <summary>
    /// Получить список контролов ленты.
    /// </summary>
    /// <param name="metadata">Метаданные объекта.</param>
    /// <returns>Список измененных данных.</returns>
    private static List<Structures.ObjectChanges.IOverrideData> GetRibbons(Sungero.Metadata.EntityMetadata metadata)
    {
      var changedList = new List<Structures.ObjectChanges.IOverrideData>();
      
      if (metadata.RibbonCardMetadata == null)
        return changedList;
      
      var baseMetadata = metadata.GetOriginal();
      if (metadata.NameGuid == baseMetadata.NameGuid)
        baseMetadata = metadata.BaseEntityMetadata;
      
      var iteration = 0;
      while (baseMetadata != null && baseMetadata.RibbonCardMetadata == null && iteration < 5)
      {
        if (baseMetadata != null)
          baseMetadata = baseMetadata.BaseEntityMetadata;
        
        iteration++;
      }
      
      if (baseMetadata == null || baseMetadata.RibbonCardMetadata == null)
        return changedList;

      var ribbonCardMetadata = baseMetadata.RibbonCardMetadata;
      List<string> baseRibbonNames = ribbonCardMetadata.AllElements.Select(_ => _.Name).ToList();
      foreach (var groupMetadata in metadata.RibbonCardMetadata.AllElements.Where(_ => !baseRibbonNames.Contains(_.Name) || _.IsOverridden).GroupBy(_ => _.ParentGroup.ParentPage))
      {
        var pageMetadata = (Sungero.Metadata.RibbonPageMetadata)groupMetadata.Key;
        var pageResourceName = string.Format("Ribbon_{0}_{1}", pageMetadata.Name, pageMetadata.NameGuid.ToString().Replace("-", string.Empty));
        var groupName = ReportRes.ObjectChanges.TabNameFormat(ResourceService.Instance.GetString(metadata, pageResourceName, true, Array.Empty<object>()));
        foreach (var actionMetadata in groupMetadata)
        {
          var actionName = string.Empty;
          
          if (actionMetadata is Sungero.Metadata.RibbonActionButtonMetadata)
          {
            var ribbonAction = (Sungero.Metadata.RibbonActionButtonMetadata)actionMetadata;
            actionName = string.Format("Кнопка - {0}", ribbonAction.Action.GetLocalizedName());
          }
          
          if (actionMetadata is Sungero.Metadata.RibbonStateToggleButtonMetadata)
          {
            var stateToggle = (Sungero.Metadata.RibbonStateToggleButtonMetadata)actionMetadata;
            var stateToggleResourceName = string.Format("Ribbon_{0}_{1}", stateToggle.Name, stateToggle.NameGuid.ToString().Replace("-", string.Empty));
            actionName = ReportRes.ObjectChanges.SwitchNameFormat(ResourceService.Instance.GetString(metadata, stateToggleResourceName, true, Array.Empty<object>()));
          }
          
          if (actionMetadata is Sungero.Metadata.RibbonStaticDropDownButtonMetadata)
          {
            var dropDownButton = (Sungero.Metadata.RibbonStaticDropDownButtonMetadata)actionMetadata;
            var dropDownResourceName = string.Format("Ribbon_{0}_{1}", dropDownButton.Name, dropDownButton.NameGuid.ToString().Replace("-", string.Empty));
            actionName = ReportRes.ObjectChanges.MenuButtonNameFormat(ResourceService.Instance.GetString(metadata, dropDownResourceName, true, Array.Empty<object>()));
          }
          
          if (actionMetadata is Sungero.Metadata.RibbonToggleButtonMetadata)
          {
            var toggleButton = (Sungero.Metadata.RibbonToggleButtonMetadata)actionMetadata;
            actionName = ReportRes.ObjectChanges.PropertySwitchNameFormat(toggleButton.Action.GetLocalizedName());
          }
          
          if (!string.IsNullOrEmpty(actionName))
            changedList.Add(Structures.ObjectChanges.OverrideData.Create(string.Empty,
                                                                   "RibbonActions",
                                                                   actionName,
                                                                   groupName,
                                                                   actionMetadata.IsOverridden ? ReportRes.ObjectChanges.ModifiedName : ReportRes.ObjectChanges.AddedName,
                                                                   string.Empty));
        }
      }
      
      return changedList;
    }
    
    /// <summary>
    /// Получить список событий и параметров.
    /// </summary>
    /// <returns>Список событий и параметров.</returns>
    public virtual System.Collections.Generic.HashSet<System.Collections.Generic.KeyValuePair<string, string>> GetEventNames()
    {
      return new HashSet<KeyValuePair<string, string>> {
        new KeyValuePair<string, string> ("BeforeSaveServer", "До сохранения"),
        new KeyValuePair<string, string> ("SavingServer", "До сохранения (в транзакции)"),
        new KeyValuePair<string, string> ("SavedServer", "После сохранения (в транзакции)"),
        new KeyValuePair<string, string> ("AfterSaveServer", "После сохранения"),
        new KeyValuePair<string, string> ("WriteHistoryServer", "До сохранения истории"),
        new KeyValuePair<string, string> ("BeforeDeleteServer", "До удаления"),
        new KeyValuePair<string, string> ("DeletingServer", "До удаления (в транзакции)"),
        new KeyValuePair<string, string> ("AfterDeleteServer", "После удаления"),
        new KeyValuePair<string, string> ("CreatingFromServer", "Копирование"),
        new KeyValuePair<string, string> ("CreatedServer", "Создание"),
        new KeyValuePair<string, string> ("FilteringServer", "Фильтрация объекта или панели фильтрации"),
        new KeyValuePair<string, string> ("ValidateFilterPanelClient", "Проверка фильтра панели фильтрации"),
        new KeyValuePair<string, string> ("UiFilteringServer", "UI-фильтрация"),
        new KeyValuePair<string, string> ("ShowingClient", "Показ формы"),
        new KeyValuePair<string, string> ("ClosingClient", "Закрытие формы"),
        new KeyValuePair<string, string> ("RefreshClient", "Обновление формы"),
        new KeyValuePair<string, string> ("ChangedShared", "Изменение значение свойства"),
        new KeyValuePair<string, string> ("AddedShared", "Добавление в коллекцию"),
        new KeyValuePair<string, string> ("DeletedShared", "Удаление из коллекции"),
        new KeyValuePair<string, string> ("ValueInputClient", "Изменение значение контрола"),
        new KeyValuePair<string, string> ("IsRequired", "Обязательное"),
        new KeyValuePair<string, string> ("IsEnabled", "Разрешить редактирование"),
        new KeyValuePair<string, string> ("IsShowedInList", "Отображать в форме-списке"),
        new KeyValuePair<string, string> ("CanBeSearch", "Отображать в диалоге поиска"),
        new KeyValuePair<string, string> ("IsVisibility", "Отображать в карточке"),
        new KeyValuePair<string, string> ("IsLoadEagerly", "Загружать значение сразу"),
        new KeyValuePair<string, string> ("IsUnique", "Уникальное"),
        new KeyValuePair<string, string> ("IsDisplayValue", "Свойство задает отображаемое имя сущности"),
        new KeyValuePair<string, string> ("IsQuickSearchAllowed", "Быстрый поиск в форме-списке ищет по этому свойству"),
        new KeyValuePair<string, string> ("GenerateHandler", "Выполнение/Возможность выполнения"),
        new KeyValuePair<string, string> ("NeedConfirmation", "Запрашивать подтверждение перед выполнением"),
        new KeyValuePair<string, string> ("AllowUserDisableConfirmation", "Позволить пользователю отключать подтверждение"),
        new KeyValuePair<string, string> ("IsToggleAction", "Действие-переключатель"),
        new KeyValuePair<string, string> ("IsEmptySelectionAllowed", "Доступнопо при отсутсвии выделенных записей в списке"),
        new KeyValuePair<string, string> ("IsCreationAction", "Является действием создания"),
        new KeyValuePair<string, string> ("SmallIconName", "Маленькая иконка"),
        new KeyValuePair<string, string> ("LargeIconName", "Большая иконка"),
        new KeyValuePair<string, string> ("IsVisible", "Отображать в проводнике"),
        new KeyValuePair<string, string> ("CanBeSearch", "Отображать в диалоге поиска"),
        new KeyValuePair<string, string> ("IconName", "Иконка"),
        new KeyValuePair<string, string> ("HideFromCreationArea", "Скрыть из области создания"),
        new KeyValuePair<string, string> ("HideFromNavigationEditorCreationArea", "Скрыть из области создания выпадающего списка"),
        new KeyValuePair<string, string> ("ShowingSignDialogClient", "До показа диалога подписания"),
        new KeyValuePair<string, string> ("LookupMode", "Способ выбора значения"),
        new KeyValuePair<string, string> ("IsCacheable", "Кэшировать на клиенте"),
        new KeyValuePair<string, string> ("OpenCardByDefaultInCollection", "Двойной клик на документе открывает карточку"),
        new KeyValuePair<string, string> ("IsAutoCreated", "Создавать только программно"),
        new KeyValuePair<string, string> ("NeedWriteHistory", "Вести историю изменений"),
        new KeyValuePair<string, string> ("CanBeUsedInIntegration", "Использовать в сервисе интеграции"),
        new KeyValuePair<string, string> ("IsStatusEnabled", "Действующая/Закрытая"),
        new KeyValuePair<string, string> ("SearchDialogLookupServer", "Фильтрация выбора из списка при поиске"),
        new KeyValuePair<string, string> ("LookupServer", "Фильтрация выбора из списка"),
        new KeyValuePair<string, string> ("FlatListInStandaloneLookup", "Отображать как список при выборе"),
        new KeyValuePair<string, string> ("ConvertingFromServer", "Смена типа"),
        new KeyValuePair<string, string> ("BeforeSigningServer", "До подписания"),
        new KeyValuePair<string, string> ("BeforeStartServer", "До старта"),
        new KeyValuePair<string, string> ("BeforeRestartServer", "До рестарта"),
        new KeyValuePair<string, string> ("BeforeResumeServer", "До возобновления"),
        new KeyValuePair<string, string> ("BeforeAbortServer", "До прекращения"),
        new KeyValuePair<string, string> ("AfterSuspendServer", "После приостановки"),
        new KeyValuePair<string, string> ("OnlyPerformersCanComplete", "Только исполнители могут выполнять задания"),
        new KeyValuePair<string, string> ("ShowTypeNameInThread", "В переписке показывать тип вместо темы"),
        new KeyValuePair<string, string> ("IsCreateVersionsOnLayerForbidden", "Запретить создавать версии схемы задачи в перекрытиях"),
        new KeyValuePair<string, string> ("DocumentVersionCreationSources", "Разрешить создание версий документа"),
        new KeyValuePair<string, string> ("UseSchemeFromSettings", "Схема настраивается в проводнике"),
        new KeyValuePair<string, string> ("EntityAfterSuspendEvent", "После приостановки"),
        new KeyValuePair<string, string> ("EntityBeforeAbortEvent", "До прекращения"),
        new KeyValuePair<string, string> ("EntityBeforeResumeEvent", "До возобновления")
      };
    }
    
    public override void AfterExecute(Sungero.Reporting.Server.AfterExecuteEventArgs e)
    {
      Sungero.Docflow.PublicFunctions.Module.DeleteReportData(Constants.ObjectChanges.SourceTableName, ObjectChanges.ReportSessionId);
    }

  }
}